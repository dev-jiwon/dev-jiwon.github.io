---
title: "Object-Oriented Programming"
layout: post
date: 2018-05-18 11:35
image: https://i.imgur.com/ph8w3kP.png
headerImage: false
tag:
- obb
- object
- oriented
- programming
- swift
- class
category: blog
author: JIWON
description: obb에 관한 내용들
---
# Object-Oriented Programming (객체 지향 프로그래밍)
**구조적 (Structured)**: Pascal, C언어
**객체지향(Object-Oriented)**: C++,  JAVA 등

## Software development process
![software development process](https://i.imgur.com/F5G1534.png)
<figcaption class="caption">Software development process의 대표적인 모델</figcaption> <br />

## Programming Paradigm
패러다임 : 어떤 시대·분야에서의 특징적인 사고 방식·인식의 체계, 틀
> Objective-C : OOP 언어 <br />
> Swift : POP 를 지향하는 멀티 패러다임 언어

[ 주요 패러다임 ]
- **POP** : Protocol-Oriented Programming <br />
- **OOP** : Object-Oriented Programming <br />
- **FP** : Functional Programming <br />

### 객체지향 프로그래밍 이란 **캡슐화**, **다형성**, **상속** 을 이용하여 코드 재사용을 증가시키고, 유지보수를 감소시키는 장점을 얻기 위해서 객체들을 연결시켜 프로그래밍 하는 것
언어 또는 기술이 다음 사항들을 직접 지원한다면 객체 지향
- **추상화** : 클래스나 객체를 제공
- **상속** : 이미 존재하는 것으로부터 새로운 추상화를 만들어 낼 능력을 제공 런타임
- **다형성** : 수행 시간에 바인딩 할 수 있는 어떠한 폼을 제공

## Object-Oriented Programming
단순한 데이터 처리 흐름에서 벗어나 각 역할을 지닌 객체들의 상호작용으로 동작 <br />
**객체** : 데이터 (상태) + 메서드 (행위) <br />
최초의 **OOP** 언어 : Smalltalk / Smalltalk + C —> Objective-C <br />
![객체 구조](https://i.imgur.com/qED0p3f.png)

클래스의 형태)
```swift
class ClassName {
			var variable1 = 1
      var variable2 = "2"
      func functionName1(param: Int) {        
	      //code
			}
			func functionName2(param: Int) {        
	      //code
			}
}
```

![구조 설명](https://i.imgur.com/YAagcHI.png)

## 객체란?!
실세계에 존재하거나 생각할 수 있는 것을 **객체(object)**라고 한다. 흔히 볼 수 있는 책상, 의자, 전화기 같은 사물은 물론이고 강의, 수강 신청 같은 개념으로 존재하는 것도 모두 객체이다. 다시 말해 사전에 나와 있는 명사뿐 아니라 동사의 명사형까지도 모두 객체인 것이다. 그리고 더 넓게 보면 인간이 생각하고 표현할 수 있는 모든 것이 객체이다.
<br />
이런 객체는 관점에 따라 다음과 같이 여러 개념으로 이해된다.
<br /><br />
- **모델링 관점** : 객체는 명확한 의미를 담고 있는 대상 또는 개념이다.<br />
- **프로그래머 관점** : 객체는 클래스에서 생성된 변수이다.<br />
- **소프트웨어 개발 관점** : 객체는 소프트웨어 개발 대상으로, 어떤 한 시점에 객체 상태를 나타내는 데이터와 해당 데이터를 처리하고 참조하는 동작을 의미하는 메서드(함수)를 모아놓은 '데이터+메서드' 형태의 소프트웨어 모듈이다.<br />
- **객체지향 프로그래밍 관점** : 객체는 데이터와 함수를 속성(attribute)과 메서드(method) 용어로 구현한다.
![관련 이미지](https://i.imgur.com/PKxI8rJ.png)
이제 소프트웨어 개발 관점에서 객체의 특성을 알아보자.

- **식별자(identity) 존재** : 객체를 구별하는 유일한 식별자를 갖는다. <br />
- **상태(state) 존재** : 자료구조에 해당하는 상태를 갖는다.<br />
- **메서드 존재** : 연산을 수행할 수 있는 행위에 해당하는, 잘 정의된 메서드를 갖는다.<br />
- **클래스로 선언 및 사용** : 객체지향 프로그램에서 객체는 비슷한 객체의 구조와 행위가 클래스로 선언되어 사용된다.<br />

<figcaption class="caption">출처: 객체 (쉽게 배우는 소프트웨어 공학, 2015. 11. 30., 한빛아카데미(주))</figcaption> <br />

## Class & Object
> "많은개체들이공통된명칭을 가질때그것들은언제나 또하나의이데아,즉형상을갖는다.가령침대는무수 히 많지만 침대의 이데아, 즉 그 형상은 오직 하나이다. 여러가지 개개의 침대는 실재가 아니며 오직 그 이데아의 모사(模寫)에 의해 만들어졌을 뿐이다.” - 플라톤
![class & object](https://i.imgur.com/apOX1RA.png)

[ Class ]
- 추상 (abstract) , 표현 대상에 대한 이데아(형상)
- 이상적인 존재 (이미지, 설계도, 틀, 설명서)
- 공통의 특징
<br />

[ Object ]
- 실체 (instance) , 추상을 실체화한 대상
- 이데아의 모사
- 개별 속성

> **Object-c와 Swift에서의 인스턴스 생성 방법**
> Objective-C 인스턴스 생성
> - [[ClassName alloc] init];
> Swift 인스턴스 생성
> - Class Name()

